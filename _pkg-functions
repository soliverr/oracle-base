# pkgs-functions
#
#  Actions of packet.
#
#    Global `DISTR', `ACTION' environment variables can be setted
#     or
#    Two parameters `distr' `action' should be supplied for every procedures.
#
#

# summary of how this script can be called:
#        * <new-preinst> `install'
#        * <new-preinst> `install' <old-version>
#        * <new-preinst> `upgrade' <old-version>
#        * <old-preinst> `abort-upgrade' <new-version>
#
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
preinst() {
    local distr=${1:-$DISTR}
    local action=${2:-$ACTION}

    case "$action" in
        install)
            # Create users and groups
            if ! id oracle >/dev/null 2>&1; then
                case "$distr" in
                    redhat)
                        groupadd -r oracle || true
                        useradd -r --gid oracle --create-home oracle
                    ;;
                    debian)
                        addgroup --system oracle || true
                        adduser --system --ingroup oracle --disabled-password oracle
                    ;;
                    * ) echo "preinst called with unknown distribution \`$distr'" >&2
                        exit 1
                    ;;
                esac
            fi

            # Check for `oracle' user and group
            groups oracle | grep oracle >/dev/null

            # Create sofware owner group
            if ! grep --silent --no-messages '^oinstall' /etc/group >/dev/null 2>&1; then
                groupadd -r oinstall || true
            fi
            gpasswd -A oracle oinstall
            gpasswd -M oracle oinstall

            # Check for `oinstall' group
            groups oracle | grep oinstall >/dev/null
        ;;
        upgrade)
        ;;
        abort-upgrade|abort-remove|abort-deconfigure)
        ;;
        null)
            exit 0
        ;;
        *)
            echo "preinst called with unknown argument \`$@'" >&2
            exit 1
        ;;
    esac
}

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
postinst() {
    local distr=${1:-$DISTR}
    local action=${2:-$ACTION}

    case "$action" in
        configure)
        ;;
        upgrade)
        ;;
        abort-upgrade|abort-remove|abort-deconfigure)
        ;;
        null)
            exit 0
        ;;
        *)
            echo "postinst called with unknown argument \`$@'" >&2
            exit 1
        ;;
    esac
}

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
postrm() {
    local distr=${1:-$DISTR}
    local action=${2:-$ACTION}

    case "$action" in
        remove)
        ;;
        purge)
            userdel --force oracle
            case "$distr" in
                redhat)
                    groupdel oracle || true
                    groupdel oinstall || true
                ;;
                debian)
                    delgroup oracle || true
                    delgroup oinstall || true
                ;;
                * ) echo "postrm called with unknown distribution \`$distr'" >&2
                    exit 1
                ;;
            esac
        ;;
        upgrade)
        ;;
        failed-upgrade|abort-install|abort-upgrade|disappear)
        ;;
        null)
            exit 0
        ;;
        *)
            echo "postrm called with unknown arguments \`$@'" >&2
            exit 1
        ;;
    esac
}

# summary of how this script can be called:
#        * <prerm> `remove'
#        * <old-prerm> `upgrade' <new-version>
#        * <new-prerm> `failed-upgrade' <old-version>
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
# for details, see /usr/doc/packaging-manual/
prerm() {
    local distr=${1:-$DISTR}
    local action=${2:-$ACTION}
    local version=$3

    case "$action" in
     remove)
     ;;
     upgrade|deconfigure)
     ;;
     failed-upgrade)
     ;;
     *)
         echo "prerm called with unknown arguments \`$@'" >&2
         exit 0
     ;;
 esac
}
